==================== 
FILE: connection_pool/server_package/config.py 

from configparser import ConfigParser


def load_config(filename='settings.ini', section=None):
    if section is None:
        raise ValueError("Section must be specified")

    parser = ConfigParser()
    parser.read(filename)

    if not parser.has_section(section):
        raise Exception(f'Section {section} not found in the {filename} file')

    return {param[0]: param[1] for param in parser.items(section)}


def db_config(filename='settings.ini'):
    return load_config(filename, 'postgresql')


def connection_pool_config(filename='settings.ini'):
    return load_config(filename, 'connection_pool')


# def server_data(filename='settings.ini'):
#     return load_config(filename, 'server_data')


def stress_test(filename='settings.ini'):
    return load_config(filename, 'stress_test') 

==================== 
FILE: connection_pool/server_package/conn_pool.py 

import threading
import time
from psycopg2 import connect as pg_connect
from connection_pool.server_package.config import db_config


class ConnectionPool:
    def __init__(self, minconn, maxconn, cleanup_interval):
        self.minconn = int(minconn)
        self.maxconn = int(maxconn)
        self.cleanup_interval = int(cleanup_interval)
        self.all_connections = []
        self.in_use_conn = 0
        self.last_cleanup_time = time.time()
        self.lock = threading.Lock()
        self.semaphore = threading.BoundedSemaphore(self.maxconn)
        self.initialize_pool()

    def initialize_pool(self):
        with self.lock:
            for _ in range(self.minconn):
                self.all_connections.append(self.create_new_connection())
            print(f"Initialized connection pool with {self.minconn} connections.")

    def create_new_connection(self):
        params = db_config()
        return pg_connect(**params)

    def aquire(self):
        if not self.semaphore.acquire(timeout=10):  # Timeout na 10 sekund, aby zapobiec deadlockom
            raise Exception("Failed to acquire a connection: Timeout")

        try:
            with self.lock:
                self.cleanup_if_needed()
                if self.all_connections:
                    conn = self.all_connections.pop()
                else:
                    conn = self.create_new_connection()
                self.in_use_conn += 1
                print(
                    f"[AQUIRE] Acquired connection. In use: {self.in_use_conn}, Available: {len(self.all_connections)}")
                return conn
        except Exception as e:
            print(f"[AQUIRE ERROR] Error while acquiring connection: {e}")
            raise e  # Ponownie rzuæ wyj¹tek po zapisaniu b³êdu
        finally:
            if 'conn' not in locals() or conn is None:
                # Jeœli nie uda³o siê przej¹æ po³¹czenia, semafor powinien zostaæ zwolniony
                self.semaphore.release()
                print("[DEBUG] Semaphore released due to error in acquiring connection.")

    def release(self, conn):
        print("[DEBUG] Releasing connection...")
        try:
            with self.lock:
                if self.in_use_conn > 0:
                    self.in_use_conn -= 1
                    if not conn.closed:
                        if len(self.all_connections) < self.maxconn:
                            self.all_connections.append(conn)
                        else:
                            conn.close()
                    else:
                        print("[RELEASE] Connection was already closed.")
                else:
                    print("[RELEASE ERROR] No connections in use to release.")
        except Exception as e:
            print(f"[RELEASE ERROR] Exception while releasing connection: {e}")
        finally:
            self.semaphore.release()
            print(f"[DEBUG] Semaphore released. In use: {self.in_use_conn}, Available: {len(self.all_connections)}")
            # self.cleanup_pool()  # Automatyczne czyszczenie puli

    def handle_connection_error(self, conn):
        try:
            with self.lock:
                if self.in_use_conn > 0:
                    self.in_use_conn -= 1
                    try:
                        conn.close()
                    except Exception as e:
                        print(f"[ERROR] Error closing connection: {e}")
                    finally:
                        if len(self.all_connections) < self.minconn:
                            self.all_connections.append(self.create_new_connection())
                    print(
                        f"[ERROR] Handled connection error. In use: {self.in_use_conn}, Available: {len(self.all_connections)}")
                else:
                    raise Exception("No connections in use to handle error.")
        finally:
            self.semaphore.release()
            print(f"[DEBUG] Semaphore released. In use: {self.in_use_conn}, Available: {len(self.all_connections)}")

    def cleanup_if_needed(self):
        current_time = time.time()
        if current_time - self.last_cleanup_time >= self.cleanup_interval:
            print("[DEBUG] Performing cleanup...")
            self.cleanup_pool()
            self.last_cleanup_time = current_time

    def cleanup_pool(self):
        with self.lock:
            print(f"[CLEANUP] Starting cleanup. Available connections before cleanup: {len(self.all_connections)}")
            while len(self.all_connections) > self.minconn:
                conn = self.all_connections.pop()
                try:
                    conn.close()
                    print("[CLEANUP] Closed an idle connection.")
                except Exception as e:
                    print(f"[CLEANUP ERROR] Error closing connection: {e}")
            print(f"[CLEANUP] Cleanup finished. Available connections after cleanup: {len(self.all_connections)}")

    def close_connection(self, conn):
        try:
            conn.close()
            print("[CLEANUP] Connection closed.")
        except Exception as e:
            print(f"[CLEANUP ERROR] Error closing connection: {e}")

    def info(self):
        with self.lock:
            total_connections = self.in_use_conn + len(self.all_connections)
            print(
                f"[INFO] In use: {self.in_use_conn}, Available: {len(self.all_connections)}, Total: {total_connections}") 

==================== 
FILE: connection_pool/server_package/connect.py 

from connection_pool.server_package.conn_pool import ConnectionPool
from connection_pool.server_package.config import connection_pool_config


class DatabaseConnectionError(Exception):
    pass


params = connection_pool_config()
pool = ConnectionPool(params['minconn'], params['maxconn'], params['cleanup_interval'])


def connect():
    try:
        return pool.aquire()
    except Exception as e:
        raise DatabaseConnectionError(f"Connection error: {e}")


def release_connection(conn):
    pool.release(conn)


def handle_connection_error(conn):
    pool.handle_connection_error(conn)


def info():
    pool.info()

 

==================== 
FILE: connection_pool/server_package/stress_test.py 

import time
import random
from concurrent.futures import ThreadPoolExecutor, as_completed
from connection_pool.server_package.connect import connect, release_connection, handle_connection_error, info
from connection_pool.server_package.config import stress_test
from psycopg2 import sql

params = stress_test()
NUM_THREADS = int(params['num_threads'])
TEST_DURATION = int(params['test_duration'])


def stress_test_operation(thread_id):
    start_time = time.time()
    conn = None
    while time.time() - start_time < TEST_DURATION:
        try:
            conn = connect()
            with conn.cursor() as cur:
                if random.random() < 0.1:
                    cur.execute("SELECT * FROM non_existing_table")
                    print(f"[SELECT ERROR]")
                else:
                    operation = random.choice(["insert", "select"])
                    if operation == "insert":
                        query = sql.SQL("INSERT INTO items (item_name, item_quantity) VALUES (%s, %s)")
                        cur.execute(query, (f'Item {random.randint(1, 100000)}', random.randint(1, 100)))
                        print(f"[INSERT]")
                    elif operation == "select":
                        query = sql.SQL("SELECT * FROM items ORDER BY item_id DESC LIMIT 1")
                        print(f"[SELECT]")
                        cur.execute(query)
                        result = cur.fetchone()
                        if result:
                            print(f"Thread {thread_id}: {result}")
                conn.commit()
            info()
        except Exception as e:
            if conn:
                handle_connection_error(conn)
            print(f"Thread {thread_id} encountered an error: {e}")
            conn = None
        finally:
            if conn:
                release_connection(conn)
        time.sleep(random.uniform(0.01, 0.1))


def run_stress_test():
    start_time = time.time()
    with ThreadPoolExecutor(max_workers=NUM_THREADS) as executor:
        futures = [executor.submit(stress_test_operation, thread_id) for thread_id in range(NUM_THREADS)]
        for future in as_completed(futures):
            try:
                future.result()
            except Exception as e:
                print(f"Error occurred: {e}")
    duration = time.time() - start_time
    print(f"Stress test completed in {duration} seconds")


if __name__ == "__main__":
    run_stress_test()
    print(f'End of Stress Test')
 

==================== 
FILE: connection_pool/server_package/settings.ini

[postgresql]
host=127.0.0.1
database=CP_BASE
user=pozamiataj
password=pozamiataj.pl

[connection_pool]
minconn=5
maxconn=100
cleanup_interval=65

[server_data]
host=127.0.0.1
port=65432
buffer_size=1024

[stress_test]
num_threads=110
test_duration=60
